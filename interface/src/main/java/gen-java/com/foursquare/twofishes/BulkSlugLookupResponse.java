/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BulkSlugLookupResponse implements TBase<BulkSlugLookupResponse, BulkSlugLookupResponse._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BulkSlugLookupResponse");

  private static final TField INTERPRETATIONS_FIELD_DESC = new TField("interpretations", TType.LIST, (short)1);
  private static final TField INTERPRETATION_INDEXES_FIELD_DESC = new TField("interpretationIndexes", TType.LIST, (short)2);
  private static final TField PARENT_FEATURES_FIELD_DESC = new TField("parentFeatures", TType.LIST, (short)4);
  private static final TField DEBUG_LINES_FIELD_DESC = new TField("debugLines", TType.LIST, (short)3);

  public List<GeocodeInterpretation> interpretations;
  public List<List<Integer>> interpretationIndexes;
  public List<GeocodeFeature> parentFeatures;
  public List<String> debugLines;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    INTERPRETATIONS((short)1, "interpretations"),
    INTERPRETATION_INDEXES((short)2, "interpretationIndexes"),
    PARENT_FEATURES((short)4, "parentFeatures"),
    DEBUG_LINES((short)3, "debugLines");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERPRETATIONS
          return INTERPRETATIONS;
        case 2: // INTERPRETATION_INDEXES
          return INTERPRETATION_INDEXES;
        case 4: // PARENT_FEATURES
          return PARENT_FEATURES;
        case 3: // DEBUG_LINES
          return DEBUG_LINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERPRETATIONS, new FieldMetaData("interpretations", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, GeocodeInterpretation.class))));
    tmpMap.put(_Fields.INTERPRETATION_INDEXES, new FieldMetaData("interpretationIndexes", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMap.put(_Fields.PARENT_FEATURES, new FieldMetaData("parentFeatures", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, GeocodeFeature.class))));
    tmpMap.put(_Fields.DEBUG_LINES, new FieldMetaData("debugLines", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BulkSlugLookupResponse.class, metaDataMap);
  }

  public BulkSlugLookupResponse() {
  }

  public BulkSlugLookupResponse(
    List<GeocodeInterpretation> interpretations,
    List<List<Integer>> interpretationIndexes)
  {
    this();
    this.interpretations = interpretations;
    this.interpretationIndexes = interpretationIndexes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BulkSlugLookupResponse(BulkSlugLookupResponse other) {
    if (other.isSetInterpretations()) {
      List<GeocodeInterpretation> __this__interpretations = new ArrayList<GeocodeInterpretation>();
      for (GeocodeInterpretation other_element : other.interpretations) {
        __this__interpretations.add(new GeocodeInterpretation(other_element));
      }
      this.interpretations = __this__interpretations;
    }
    if (other.isSetInterpretationIndexes()) {
      List<List<Integer>> __this__interpretationIndexes = new ArrayList<List<Integer>>();
      for (List<Integer> other_element : other.interpretationIndexes) {
        List<Integer> __this__interpretationIndexes_copy = new ArrayList<Integer>();
        for (Integer other_element_element : other_element) {
          __this__interpretationIndexes_copy.add(other_element_element);
        }
        __this__interpretationIndexes.add(__this__interpretationIndexes_copy);
      }
      this.interpretationIndexes = __this__interpretationIndexes;
    }
    if (other.isSetParentFeatures()) {
      List<GeocodeFeature> __this__parentFeatures = new ArrayList<GeocodeFeature>();
      for (GeocodeFeature other_element : other.parentFeatures) {
        __this__parentFeatures.add(new GeocodeFeature(other_element));
      }
      this.parentFeatures = __this__parentFeatures;
    }
    if (other.isSetDebugLines()) {
      List<String> __this__debugLines = new ArrayList<String>();
      for (String other_element : other.debugLines) {
        __this__debugLines.add(other_element);
      }
      this.debugLines = __this__debugLines;
    }
  }

  public BulkSlugLookupResponse deepCopy() {
    return new BulkSlugLookupResponse(this);
  }

  @Override
  public void clear() {
    this.interpretations = null;
    this.interpretationIndexes = null;
    this.parentFeatures = null;
    this.debugLines = null;
  }

  public int getInterpretationsSize() {
    return (this.interpretations == null) ? 0 : this.interpretations.size();
  }

  public java.util.Iterator<GeocodeInterpretation> getInterpretationsIterator() {
    return (this.interpretations == null) ? null : this.interpretations.iterator();
  }

  public void addToInterpretations(GeocodeInterpretation elem) {
    if (this.interpretations == null) {
      this.interpretations = new ArrayList<GeocodeInterpretation>();
    }
    this.interpretations.add(elem);
  }

  public List<GeocodeInterpretation> getInterpretations() {
    return this.interpretations;
  }

  public BulkSlugLookupResponse setInterpretations(List<GeocodeInterpretation> interpretations) {
    this.interpretations = interpretations;
    return this;
  }

  public void unsetInterpretations() {
    this.interpretations = null;
  }

  /** Returns true if field interpretations is set (has been asigned a value) and false otherwise */
  public boolean isSetInterpretations() {
    return this.interpretations != null;
  }

  public void setInterpretationsIsSet(boolean value) {
    if (!value) {
      this.interpretations = null;
    }
  }

  public int getInterpretationIndexesSize() {
    return (this.interpretationIndexes == null) ? 0 : this.interpretationIndexes.size();
  }

  public java.util.Iterator<List<Integer>> getInterpretationIndexesIterator() {
    return (this.interpretationIndexes == null) ? null : this.interpretationIndexes.iterator();
  }

  public void addToInterpretationIndexes(List<Integer> elem) {
    if (this.interpretationIndexes == null) {
      this.interpretationIndexes = new ArrayList<List<Integer>>();
    }
    this.interpretationIndexes.add(elem);
  }

  public List<List<Integer>> getInterpretationIndexes() {
    return this.interpretationIndexes;
  }

  public BulkSlugLookupResponse setInterpretationIndexes(List<List<Integer>> interpretationIndexes) {
    this.interpretationIndexes = interpretationIndexes;
    return this;
  }

  public void unsetInterpretationIndexes() {
    this.interpretationIndexes = null;
  }

  /** Returns true if field interpretationIndexes is set (has been asigned a value) and false otherwise */
  public boolean isSetInterpretationIndexes() {
    return this.interpretationIndexes != null;
  }

  public void setInterpretationIndexesIsSet(boolean value) {
    if (!value) {
      this.interpretationIndexes = null;
    }
  }

  public int getParentFeaturesSize() {
    return (this.parentFeatures == null) ? 0 : this.parentFeatures.size();
  }

  public java.util.Iterator<GeocodeFeature> getParentFeaturesIterator() {
    return (this.parentFeatures == null) ? null : this.parentFeatures.iterator();
  }

  public void addToParentFeatures(GeocodeFeature elem) {
    if (this.parentFeatures == null) {
      this.parentFeatures = new ArrayList<GeocodeFeature>();
    }
    this.parentFeatures.add(elem);
  }

  public List<GeocodeFeature> getParentFeatures() {
    return this.parentFeatures;
  }

  public BulkSlugLookupResponse setParentFeatures(List<GeocodeFeature> parentFeatures) {
    this.parentFeatures = parentFeatures;
    return this;
  }

  public void unsetParentFeatures() {
    this.parentFeatures = null;
  }

  /** Returns true if field parentFeatures is set (has been asigned a value) and false otherwise */
  public boolean isSetParentFeatures() {
    return this.parentFeatures != null;
  }

  public void setParentFeaturesIsSet(boolean value) {
    if (!value) {
      this.parentFeatures = null;
    }
  }

  public int getDebugLinesSize() {
    return (this.debugLines == null) ? 0 : this.debugLines.size();
  }

  public java.util.Iterator<String> getDebugLinesIterator() {
    return (this.debugLines == null) ? null : this.debugLines.iterator();
  }

  public void addToDebugLines(String elem) {
    if (this.debugLines == null) {
      this.debugLines = new ArrayList<String>();
    }
    this.debugLines.add(elem);
  }

  public List<String> getDebugLines() {
    return this.debugLines;
  }

  public BulkSlugLookupResponse setDebugLines(List<String> debugLines) {
    this.debugLines = debugLines;
    return this;
  }

  public void unsetDebugLines() {
    this.debugLines = null;
  }

  /** Returns true if field debugLines is set (has been asigned a value) and false otherwise */
  public boolean isSetDebugLines() {
    return this.debugLines != null;
  }

  public void setDebugLinesIsSet(boolean value) {
    if (!value) {
      this.debugLines = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERPRETATIONS:
      if (value == null) {
        unsetInterpretations();
      } else {
        setInterpretations((List<GeocodeInterpretation>)value);
      }
      break;

    case INTERPRETATION_INDEXES:
      if (value == null) {
        unsetInterpretationIndexes();
      } else {
        setInterpretationIndexes((List<List<Integer>>)value);
      }
      break;

    case PARENT_FEATURES:
      if (value == null) {
        unsetParentFeatures();
      } else {
        setParentFeatures((List<GeocodeFeature>)value);
      }
      break;

    case DEBUG_LINES:
      if (value == null) {
        unsetDebugLines();
      } else {
        setDebugLines((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERPRETATIONS:
      return getInterpretations();

    case INTERPRETATION_INDEXES:
      return getInterpretationIndexes();

    case PARENT_FEATURES:
      return getParentFeatures();

    case DEBUG_LINES:
      return getDebugLines();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERPRETATIONS:
      return isSetInterpretations();
    case INTERPRETATION_INDEXES:
      return isSetInterpretationIndexes();
    case PARENT_FEATURES:
      return isSetParentFeatures();
    case DEBUG_LINES:
      return isSetDebugLines();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BulkSlugLookupResponse)
      return this.equals((BulkSlugLookupResponse)that);
    return false;
  }

  public boolean equals(BulkSlugLookupResponse that) {
    if (that == null)
      return false;

    boolean this_present_interpretations = true && this.isSetInterpretations();
    boolean that_present_interpretations = true && that.isSetInterpretations();
    if (this_present_interpretations || that_present_interpretations) {
      if (!(this_present_interpretations && that_present_interpretations))
        return false;
      if (!this.interpretations.equals(that.interpretations))
        return false;
    }

    boolean this_present_interpretationIndexes = true && this.isSetInterpretationIndexes();
    boolean that_present_interpretationIndexes = true && that.isSetInterpretationIndexes();
    if (this_present_interpretationIndexes || that_present_interpretationIndexes) {
      if (!(this_present_interpretationIndexes && that_present_interpretationIndexes))
        return false;
      if (!this.interpretationIndexes.equals(that.interpretationIndexes))
        return false;
    }

    boolean this_present_parentFeatures = true && this.isSetParentFeatures();
    boolean that_present_parentFeatures = true && that.isSetParentFeatures();
    if (this_present_parentFeatures || that_present_parentFeatures) {
      if (!(this_present_parentFeatures && that_present_parentFeatures))
        return false;
      if (!this.parentFeatures.equals(that.parentFeatures))
        return false;
    }

    boolean this_present_debugLines = true && this.isSetDebugLines();
    boolean that_present_debugLines = true && that.isSetDebugLines();
    if (this_present_debugLines || that_present_debugLines) {
      if (!(this_present_debugLines && that_present_debugLines))
        return false;
      if (!this.debugLines.equals(that.debugLines))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BulkSlugLookupResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BulkSlugLookupResponse typedOther = (BulkSlugLookupResponse)other;

    lastComparison = Boolean.valueOf(isSetInterpretations()).compareTo(typedOther.isSetInterpretations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpretations()) {
      lastComparison = TBaseHelper.compareTo(this.interpretations, typedOther.interpretations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterpretationIndexes()).compareTo(typedOther.isSetInterpretationIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpretationIndexes()) {
      lastComparison = TBaseHelper.compareTo(this.interpretationIndexes, typedOther.interpretationIndexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentFeatures()).compareTo(typedOther.isSetParentFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentFeatures()) {
      lastComparison = TBaseHelper.compareTo(this.parentFeatures, typedOther.parentFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebugLines()).compareTo(typedOther.isSetDebugLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugLines()) {
      lastComparison = TBaseHelper.compareTo(this.debugLines, typedOther.debugLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // INTERPRETATIONS
          if (field.type == TType.LIST) {
            {
              TList _list121 = iprot.readListBegin();
              this.interpretations = new ArrayList<GeocodeInterpretation>(_list121.size);
              for (int _i122 = 0; _i122 < _list121.size; ++_i122)
              {
                GeocodeInterpretation _elem123;
                _elem123 = new GeocodeInterpretation();
                _elem123.read(iprot);
                this.interpretations.add(_elem123);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // INTERPRETATION_INDEXES
          if (field.type == TType.LIST) {
            {
              TList _list124 = iprot.readListBegin();
              this.interpretationIndexes = new ArrayList<List<Integer>>(_list124.size);
              for (int _i125 = 0; _i125 < _list124.size; ++_i125)
              {
                List<Integer> _elem126;
                {
                  TList _list127 = iprot.readListBegin();
                  _elem126 = new ArrayList<Integer>(_list127.size);
                  for (int _i128 = 0; _i128 < _list127.size; ++_i128)
                  {
                    int _elem129;
                    _elem129 = iprot.readI32();
                    _elem126.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                this.interpretationIndexes.add(_elem126);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PARENT_FEATURES
          if (field.type == TType.LIST) {
            {
              TList _list130 = iprot.readListBegin();
              this.parentFeatures = new ArrayList<GeocodeFeature>(_list130.size);
              for (int _i131 = 0; _i131 < _list130.size; ++_i131)
              {
                GeocodeFeature _elem132;
                _elem132 = new GeocodeFeature();
                _elem132.read(iprot);
                this.parentFeatures.add(_elem132);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DEBUG_LINES
          if (field.type == TType.LIST) {
            {
              TList _list133 = iprot.readListBegin();
              this.debugLines = new ArrayList<String>(_list133.size);
              for (int _i134 = 0; _i134 < _list133.size; ++_i134)
              {
                String _elem135;
                _elem135 = iprot.readString();
                this.debugLines.add(_elem135);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.interpretations != null) {
      oprot.writeFieldBegin(INTERPRETATIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.interpretations.size()));
        for (GeocodeInterpretation _iter136 : this.interpretations)
        {
          _iter136.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.interpretationIndexes != null) {
      oprot.writeFieldBegin(INTERPRETATION_INDEXES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.interpretationIndexes.size()));
        for (List<Integer> _iter137 : this.interpretationIndexes)
        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter137.size()));
            for (int _iter138 : _iter137)
            {
              oprot.writeI32(_iter138);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.debugLines != null) {
      if (isSetDebugLines()) {
        oprot.writeFieldBegin(DEBUG_LINES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.debugLines.size()));
          for (String _iter139 : this.debugLines)
          {
            oprot.writeString(_iter139);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.parentFeatures != null) {
      if (isSetParentFeatures()) {
        oprot.writeFieldBegin(PARENT_FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.parentFeatures.size()));
          for (GeocodeFeature _iter140 : this.parentFeatures)
          {
            _iter140.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BulkSlugLookupResponse(");
    boolean first = true;

    sb.append("interpretations:");
    if (this.interpretations == null) {
      sb.append("null");
    } else {
      sb.append(this.interpretations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interpretationIndexes:");
    if (this.interpretationIndexes == null) {
      sb.append("null");
    } else {
      sb.append(this.interpretationIndexes);
    }
    first = false;
    if (isSetParentFeatures()) {
      if (!first) sb.append(", ");
      sb.append("parentFeatures:");
      if (this.parentFeatures == null) {
        sb.append("null");
      } else {
        sb.append(this.parentFeatures);
      }
      first = false;
    }
    if (isSetDebugLines()) {
      if (!first) sb.append(", ");
      sb.append("debugLines:");
      if (this.debugLines == null) {
        sb.append("null");
      } else {
        sb.append(this.debugLines);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (interpretations == null) {
      throw new TProtocolException("Required field 'interpretations' was not present! Struct: " + toString());
    }
  }

}

