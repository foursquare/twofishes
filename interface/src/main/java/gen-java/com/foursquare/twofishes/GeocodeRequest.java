/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class GeocodeRequest implements TBase<GeocodeRequest, GeocodeRequest._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GeocodeRequest");

  private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)1);
  private static final TField CC_FIELD_DESC = new TField("cc", TType.STRING, (short)2);
  private static final TField LANG_FIELD_DESC = new TField("lang", TType.STRING, (short)3);
  private static final TField LL_FIELD_DESC = new TField("ll", TType.STRUCT, (short)4);
  private static final TField FULL__DEPRECATED_FIELD_DESC = new TField("full_DEPRECATED", TType.BOOL, (short)5);
  private static final TField DEBUG_FIELD_DESC = new TField("debug", TType.I32, (short)6);
  private static final TField AUTOCOMPLETE_FIELD_DESC = new TField("autocomplete", TType.BOOL, (short)7);
  private static final TField WOE_HINT_FIELD_DESC = new TField("woeHint", TType.LIST, (short)8);
  private static final TField WOE_RESTRICT_FIELD_DESC = new TField("woeRestrict", TType.LIST, (short)9);
  private static final TField BOUNDS_FIELD_DESC = new TField("bounds", TType.STRUCT, (short)10);
  private static final TField SLUG_FIELD_DESC = new TField("slug", TType.STRING, (short)11);
  private static final TField INCLUDE_POLYGON__DEPRECATED_FIELD_DESC = new TField("includePolygon_DEPRECATED", TType.BOOL, (short)12);
  private static final TField RADIUS_FIELD_DESC = new TField("radius", TType.I32, (short)14);
  private static final TField MAX_INTERPRETATIONS_FIELD_DESC = new TField("maxInterpretations", TType.I32, (short)16);
  private static final TField ALLOWED_SOURCES_FIELD_DESC = new TField("allowedSources", TType.LIST, (short)17);
  private static final TField RESPONSE_INCLUDES_FIELD_DESC = new TField("responseIncludes", TType.LIST, (short)18);

  public String query;
  public String cc;
  public String lang;
  public GeocodePoint ll;
  public boolean full_DEPRECATED;
  public int debug;
  public boolean autocomplete;
  public List<YahooWoeType> woeHint;
  public List<YahooWoeType> woeRestrict;
  public GeocodeBoundingBox bounds;
  public String slug;
  public boolean includePolygon_DEPRECATED;
  public int radius;
  public int maxInterpretations;
  public List<String> allowedSources;
  public List<ResponseIncludes> responseIncludes;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUERY((short)1, "query"),
    CC((short)2, "cc"),
    LANG((short)3, "lang"),
    LL((short)4, "ll"),
    FULL__DEPRECATED((short)5, "full_DEPRECATED"),
    DEBUG((short)6, "debug"),
    AUTOCOMPLETE((short)7, "autocomplete"),
    WOE_HINT((short)8, "woeHint"),
    WOE_RESTRICT((short)9, "woeRestrict"),
    BOUNDS((short)10, "bounds"),
    SLUG((short)11, "slug"),
    INCLUDE_POLYGON__DEPRECATED((short)12, "includePolygon_DEPRECATED"),
    RADIUS((short)14, "radius"),
    MAX_INTERPRETATIONS((short)16, "maxInterpretations"),
    ALLOWED_SOURCES((short)17, "allowedSources"),
    RESPONSE_INCLUDES((short)18, "responseIncludes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // CC
          return CC;
        case 3: // LANG
          return LANG;
        case 4: // LL
          return LL;
        case 5: // FULL__DEPRECATED
          return FULL__DEPRECATED;
        case 6: // DEBUG
          return DEBUG;
        case 7: // AUTOCOMPLETE
          return AUTOCOMPLETE;
        case 8: // WOE_HINT
          return WOE_HINT;
        case 9: // WOE_RESTRICT
          return WOE_RESTRICT;
        case 10: // BOUNDS
          return BOUNDS;
        case 11: // SLUG
          return SLUG;
        case 12: // INCLUDE_POLYGON__DEPRECATED
          return INCLUDE_POLYGON__DEPRECATED;
        case 14: // RADIUS
          return RADIUS;
        case 16: // MAX_INTERPRETATIONS
          return MAX_INTERPRETATIONS;
        case 17: // ALLOWED_SOURCES
          return ALLOWED_SOURCES;
        case 18: // RESPONSE_INCLUDES
          return RESPONSE_INCLUDES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FULL_DEPRECATED_ISSET_ID = 0;
  private static final int __DEBUG_ISSET_ID = 1;
  private static final int __AUTOCOMPLETE_ISSET_ID = 2;
  private static final int __INCLUDEPOLYGON_DEPRECATED_ISSET_ID = 3;
  private static final int __RADIUS_ISSET_ID = 4;
  private static final int __MAXINTERPRETATIONS_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new FieldMetaData("query", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CC, new FieldMetaData("cc", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LANG, new FieldMetaData("lang", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LL, new FieldMetaData("ll", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, GeocodePoint.class)));
    tmpMap.put(_Fields.FULL__DEPRECATED, new FieldMetaData("full_DEPRECATED", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.DEBUG, new FieldMetaData("debug", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.AUTOCOMPLETE, new FieldMetaData("autocomplete", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.WOE_HINT, new FieldMetaData("woeHint", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new EnumMetaData(TType.ENUM, YahooWoeType.class))));
    tmpMap.put(_Fields.WOE_RESTRICT, new FieldMetaData("woeRestrict", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new EnumMetaData(TType.ENUM, YahooWoeType.class))));
    tmpMap.put(_Fields.BOUNDS, new FieldMetaData("bounds", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, GeocodeBoundingBox.class)));
    tmpMap.put(_Fields.SLUG, new FieldMetaData("slug", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.INCLUDE_POLYGON__DEPRECATED, new FieldMetaData("includePolygon_DEPRECATED", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.RADIUS, new FieldMetaData("radius", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.MAX_INTERPRETATIONS, new FieldMetaData("maxInterpretations", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ALLOWED_SOURCES, new FieldMetaData("allowedSources", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.RESPONSE_INCLUDES, new FieldMetaData("responseIncludes", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new EnumMetaData(TType.ENUM, ResponseIncludes.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(GeocodeRequest.class, metaDataMap);
  }

  public GeocodeRequest() {
    this.lang = "en";

    this.full_DEPRECATED = false;

    this.debug = 0;

    this.autocomplete = false;

    this.woeHint = new ArrayList<YahooWoeType>();

    this.woeRestrict = new ArrayList<YahooWoeType>();

    this.includePolygon_DEPRECATED = false;

    this.radius = 0;

    this.maxInterpretations = 0;

    this.responseIncludes = new ArrayList<ResponseIncludes>();

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeRequest(GeocodeRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetCc()) {
      this.cc = other.cc;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetLl()) {
      this.ll = new GeocodePoint(other.ll);
    }
    this.full_DEPRECATED = other.full_DEPRECATED;
    this.debug = other.debug;
    this.autocomplete = other.autocomplete;
    if (other.isSetWoeHint()) {
      List<YahooWoeType> __this__woeHint = new ArrayList<YahooWoeType>();
      for (YahooWoeType other_element : other.woeHint) {
        __this__woeHint.add(other_element);
      }
      this.woeHint = __this__woeHint;
    }
    if (other.isSetWoeRestrict()) {
      List<YahooWoeType> __this__woeRestrict = new ArrayList<YahooWoeType>();
      for (YahooWoeType other_element : other.woeRestrict) {
        __this__woeRestrict.add(other_element);
      }
      this.woeRestrict = __this__woeRestrict;
    }
    if (other.isSetBounds()) {
      this.bounds = new GeocodeBoundingBox(other.bounds);
    }
    if (other.isSetSlug()) {
      this.slug = other.slug;
    }
    this.includePolygon_DEPRECATED = other.includePolygon_DEPRECATED;
    this.radius = other.radius;
    this.maxInterpretations = other.maxInterpretations;
    if (other.isSetAllowedSources()) {
      List<String> __this__allowedSources = new ArrayList<String>();
      for (String other_element : other.allowedSources) {
        __this__allowedSources.add(other_element);
      }
      this.allowedSources = __this__allowedSources;
    }
    if (other.isSetResponseIncludes()) {
      List<ResponseIncludes> __this__responseIncludes = new ArrayList<ResponseIncludes>();
      for (ResponseIncludes other_element : other.responseIncludes) {
        __this__responseIncludes.add(other_element);
      }
      this.responseIncludes = __this__responseIncludes;
    }
  }

  public GeocodeRequest deepCopy() {
    return new GeocodeRequest(this);
  }

  @Override
  public void clear() {
    this.query = null;
    this.cc = null;
    this.lang = "en";

    this.ll = null;
    this.full_DEPRECATED = false;

    this.debug = 0;

    this.autocomplete = false;

    this.woeHint = new ArrayList<YahooWoeType>();

    this.woeRestrict = new ArrayList<YahooWoeType>();

    this.bounds = null;
    this.slug = null;
    this.includePolygon_DEPRECATED = false;

    this.radius = 0;

    this.maxInterpretations = 0;

    this.allowedSources = null;
    this.responseIncludes = new ArrayList<ResponseIncludes>();

  }

  public String getQuery() {
    return this.query;
  }

  public GeocodeRequest setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been asigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getCc() {
    return this.cc;
  }

  public GeocodeRequest setCc(String cc) {
    this.cc = cc;
    return this;
  }

  public void unsetCc() {
    this.cc = null;
  }

  /** Returns true if field cc is set (has been asigned a value) and false otherwise */
  public boolean isSetCc() {
    return this.cc != null;
  }

  public void setCcIsSet(boolean value) {
    if (!value) {
      this.cc = null;
    }
  }

  public String getLang() {
    return this.lang;
  }

  public GeocodeRequest setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been asigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public GeocodePoint getLl() {
    return this.ll;
  }

  public GeocodeRequest setLl(GeocodePoint ll) {
    this.ll = ll;
    return this;
  }

  public void unsetLl() {
    this.ll = null;
  }

  /** Returns true if field ll is set (has been asigned a value) and false otherwise */
  public boolean isSetLl() {
    return this.ll != null;
  }

  public void setLlIsSet(boolean value) {
    if (!value) {
      this.ll = null;
    }
  }

  public boolean isFull_DEPRECATED() {
    return this.full_DEPRECATED;
  }

  public GeocodeRequest setFull_DEPRECATED(boolean full_DEPRECATED) {
    this.full_DEPRECATED = full_DEPRECATED;
    setFull_DEPRECATEDIsSet(true);
    return this;
  }

  public void unsetFull_DEPRECATED() {
    __isset_bit_vector.clear(__FULL_DEPRECATED_ISSET_ID);
  }

  /** Returns true if field full_DEPRECATED is set (has been asigned a value) and false otherwise */
  public boolean isSetFull_DEPRECATED() {
    return __isset_bit_vector.get(__FULL_DEPRECATED_ISSET_ID);
  }

  public void setFull_DEPRECATEDIsSet(boolean value) {
    __isset_bit_vector.set(__FULL_DEPRECATED_ISSET_ID, value);
  }

  public int getDebug() {
    return this.debug;
  }

  public GeocodeRequest setDebug(int debug) {
    this.debug = debug;
    setDebugIsSet(true);
    return this;
  }

  public void unsetDebug() {
    __isset_bit_vector.clear(__DEBUG_ISSET_ID);
  }

  /** Returns true if field debug is set (has been asigned a value) and false otherwise */
  public boolean isSetDebug() {
    return __isset_bit_vector.get(__DEBUG_ISSET_ID);
  }

  public void setDebugIsSet(boolean value) {
    __isset_bit_vector.set(__DEBUG_ISSET_ID, value);
  }

  public boolean isAutocomplete() {
    return this.autocomplete;
  }

  public GeocodeRequest setAutocomplete(boolean autocomplete) {
    this.autocomplete = autocomplete;
    setAutocompleteIsSet(true);
    return this;
  }

  public void unsetAutocomplete() {
    __isset_bit_vector.clear(__AUTOCOMPLETE_ISSET_ID);
  }

  /** Returns true if field autocomplete is set (has been asigned a value) and false otherwise */
  public boolean isSetAutocomplete() {
    return __isset_bit_vector.get(__AUTOCOMPLETE_ISSET_ID);
  }

  public void setAutocompleteIsSet(boolean value) {
    __isset_bit_vector.set(__AUTOCOMPLETE_ISSET_ID, value);
  }

  public int getWoeHintSize() {
    return (this.woeHint == null) ? 0 : this.woeHint.size();
  }

  public java.util.Iterator<YahooWoeType> getWoeHintIterator() {
    return (this.woeHint == null) ? null : this.woeHint.iterator();
  }

  public void addToWoeHint(YahooWoeType elem) {
    if (this.woeHint == null) {
      this.woeHint = new ArrayList<YahooWoeType>();
    }
    this.woeHint.add(elem);
  }

  public List<YahooWoeType> getWoeHint() {
    return this.woeHint;
  }

  public GeocodeRequest setWoeHint(List<YahooWoeType> woeHint) {
    this.woeHint = woeHint;
    return this;
  }

  public void unsetWoeHint() {
    this.woeHint = null;
  }

  /** Returns true if field woeHint is set (has been asigned a value) and false otherwise */
  public boolean isSetWoeHint() {
    return this.woeHint != null;
  }

  public void setWoeHintIsSet(boolean value) {
    if (!value) {
      this.woeHint = null;
    }
  }

  public int getWoeRestrictSize() {
    return (this.woeRestrict == null) ? 0 : this.woeRestrict.size();
  }

  public java.util.Iterator<YahooWoeType> getWoeRestrictIterator() {
    return (this.woeRestrict == null) ? null : this.woeRestrict.iterator();
  }

  public void addToWoeRestrict(YahooWoeType elem) {
    if (this.woeRestrict == null) {
      this.woeRestrict = new ArrayList<YahooWoeType>();
    }
    this.woeRestrict.add(elem);
  }

  public List<YahooWoeType> getWoeRestrict() {
    return this.woeRestrict;
  }

  public GeocodeRequest setWoeRestrict(List<YahooWoeType> woeRestrict) {
    this.woeRestrict = woeRestrict;
    return this;
  }

  public void unsetWoeRestrict() {
    this.woeRestrict = null;
  }

  /** Returns true if field woeRestrict is set (has been asigned a value) and false otherwise */
  public boolean isSetWoeRestrict() {
    return this.woeRestrict != null;
  }

  public void setWoeRestrictIsSet(boolean value) {
    if (!value) {
      this.woeRestrict = null;
    }
  }

  public GeocodeBoundingBox getBounds() {
    return this.bounds;
  }

  public GeocodeRequest setBounds(GeocodeBoundingBox bounds) {
    this.bounds = bounds;
    return this;
  }

  public void unsetBounds() {
    this.bounds = null;
  }

  /** Returns true if field bounds is set (has been asigned a value) and false otherwise */
  public boolean isSetBounds() {
    return this.bounds != null;
  }

  public void setBoundsIsSet(boolean value) {
    if (!value) {
      this.bounds = null;
    }
  }

  public String getSlug() {
    return this.slug;
  }

  public GeocodeRequest setSlug(String slug) {
    this.slug = slug;
    return this;
  }

  public void unsetSlug() {
    this.slug = null;
  }

  /** Returns true if field slug is set (has been asigned a value) and false otherwise */
  public boolean isSetSlug() {
    return this.slug != null;
  }

  public void setSlugIsSet(boolean value) {
    if (!value) {
      this.slug = null;
    }
  }

  public boolean isIncludePolygon_DEPRECATED() {
    return this.includePolygon_DEPRECATED;
  }

  public GeocodeRequest setIncludePolygon_DEPRECATED(boolean includePolygon_DEPRECATED) {
    this.includePolygon_DEPRECATED = includePolygon_DEPRECATED;
    setIncludePolygon_DEPRECATEDIsSet(true);
    return this;
  }

  public void unsetIncludePolygon_DEPRECATED() {
    __isset_bit_vector.clear(__INCLUDEPOLYGON_DEPRECATED_ISSET_ID);
  }

  /** Returns true if field includePolygon_DEPRECATED is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludePolygon_DEPRECATED() {
    return __isset_bit_vector.get(__INCLUDEPOLYGON_DEPRECATED_ISSET_ID);
  }

  public void setIncludePolygon_DEPRECATEDIsSet(boolean value) {
    __isset_bit_vector.set(__INCLUDEPOLYGON_DEPRECATED_ISSET_ID, value);
  }

  public int getRadius() {
    return this.radius;
  }

  public GeocodeRequest setRadius(int radius) {
    this.radius = radius;
    setRadiusIsSet(true);
    return this;
  }

  public void unsetRadius() {
    __isset_bit_vector.clear(__RADIUS_ISSET_ID);
  }

  /** Returns true if field radius is set (has been asigned a value) and false otherwise */
  public boolean isSetRadius() {
    return __isset_bit_vector.get(__RADIUS_ISSET_ID);
  }

  public void setRadiusIsSet(boolean value) {
    __isset_bit_vector.set(__RADIUS_ISSET_ID, value);
  }

  public int getMaxInterpretations() {
    return this.maxInterpretations;
  }

  public GeocodeRequest setMaxInterpretations(int maxInterpretations) {
    this.maxInterpretations = maxInterpretations;
    setMaxInterpretationsIsSet(true);
    return this;
  }

  public void unsetMaxInterpretations() {
    __isset_bit_vector.clear(__MAXINTERPRETATIONS_ISSET_ID);
  }

  /** Returns true if field maxInterpretations is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxInterpretations() {
    return __isset_bit_vector.get(__MAXINTERPRETATIONS_ISSET_ID);
  }

  public void setMaxInterpretationsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXINTERPRETATIONS_ISSET_ID, value);
  }

  public int getAllowedSourcesSize() {
    return (this.allowedSources == null) ? 0 : this.allowedSources.size();
  }

  public java.util.Iterator<String> getAllowedSourcesIterator() {
    return (this.allowedSources == null) ? null : this.allowedSources.iterator();
  }

  public void addToAllowedSources(String elem) {
    if (this.allowedSources == null) {
      this.allowedSources = new ArrayList<String>();
    }
    this.allowedSources.add(elem);
  }

  public List<String> getAllowedSources() {
    return this.allowedSources;
  }

  public GeocodeRequest setAllowedSources(List<String> allowedSources) {
    this.allowedSources = allowedSources;
    return this;
  }

  public void unsetAllowedSources() {
    this.allowedSources = null;
  }

  /** Returns true if field allowedSources is set (has been asigned a value) and false otherwise */
  public boolean isSetAllowedSources() {
    return this.allowedSources != null;
  }

  public void setAllowedSourcesIsSet(boolean value) {
    if (!value) {
      this.allowedSources = null;
    }
  }

  public int getResponseIncludesSize() {
    return (this.responseIncludes == null) ? 0 : this.responseIncludes.size();
  }

  public java.util.Iterator<ResponseIncludes> getResponseIncludesIterator() {
    return (this.responseIncludes == null) ? null : this.responseIncludes.iterator();
  }

  public void addToResponseIncludes(ResponseIncludes elem) {
    if (this.responseIncludes == null) {
      this.responseIncludes = new ArrayList<ResponseIncludes>();
    }
    this.responseIncludes.add(elem);
  }

  public List<ResponseIncludes> getResponseIncludes() {
    return this.responseIncludes;
  }

  public GeocodeRequest setResponseIncludes(List<ResponseIncludes> responseIncludes) {
    this.responseIncludes = responseIncludes;
    return this;
  }

  public void unsetResponseIncludes() {
    this.responseIncludes = null;
  }

  /** Returns true if field responseIncludes is set (has been asigned a value) and false otherwise */
  public boolean isSetResponseIncludes() {
    return this.responseIncludes != null;
  }

  public void setResponseIncludesIsSet(boolean value) {
    if (!value) {
      this.responseIncludes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case CC:
      if (value == null) {
        unsetCc();
      } else {
        setCc((String)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    case LL:
      if (value == null) {
        unsetLl();
      } else {
        setLl((GeocodePoint)value);
      }
      break;

    case FULL__DEPRECATED:
      if (value == null) {
        unsetFull_DEPRECATED();
      } else {
        setFull_DEPRECATED((Boolean)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((Integer)value);
      }
      break;

    case AUTOCOMPLETE:
      if (value == null) {
        unsetAutocomplete();
      } else {
        setAutocomplete((Boolean)value);
      }
      break;

    case WOE_HINT:
      if (value == null) {
        unsetWoeHint();
      } else {
        setWoeHint((List<YahooWoeType>)value);
      }
      break;

    case WOE_RESTRICT:
      if (value == null) {
        unsetWoeRestrict();
      } else {
        setWoeRestrict((List<YahooWoeType>)value);
      }
      break;

    case BOUNDS:
      if (value == null) {
        unsetBounds();
      } else {
        setBounds((GeocodeBoundingBox)value);
      }
      break;

    case SLUG:
      if (value == null) {
        unsetSlug();
      } else {
        setSlug((String)value);
      }
      break;

    case INCLUDE_POLYGON__DEPRECATED:
      if (value == null) {
        unsetIncludePolygon_DEPRECATED();
      } else {
        setIncludePolygon_DEPRECATED((Boolean)value);
      }
      break;

    case RADIUS:
      if (value == null) {
        unsetRadius();
      } else {
        setRadius((Integer)value);
      }
      break;

    case MAX_INTERPRETATIONS:
      if (value == null) {
        unsetMaxInterpretations();
      } else {
        setMaxInterpretations((Integer)value);
      }
      break;

    case ALLOWED_SOURCES:
      if (value == null) {
        unsetAllowedSources();
      } else {
        setAllowedSources((List<String>)value);
      }
      break;

    case RESPONSE_INCLUDES:
      if (value == null) {
        unsetResponseIncludes();
      } else {
        setResponseIncludes((List<ResponseIncludes>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case CC:
      return getCc();

    case LANG:
      return getLang();

    case LL:
      return getLl();

    case FULL__DEPRECATED:
      return new Boolean(isFull_DEPRECATED());

    case DEBUG:
      return new Integer(getDebug());

    case AUTOCOMPLETE:
      return new Boolean(isAutocomplete());

    case WOE_HINT:
      return getWoeHint();

    case WOE_RESTRICT:
      return getWoeRestrict();

    case BOUNDS:
      return getBounds();

    case SLUG:
      return getSlug();

    case INCLUDE_POLYGON__DEPRECATED:
      return new Boolean(isIncludePolygon_DEPRECATED());

    case RADIUS:
      return new Integer(getRadius());

    case MAX_INTERPRETATIONS:
      return new Integer(getMaxInterpretations());

    case ALLOWED_SOURCES:
      return getAllowedSources();

    case RESPONSE_INCLUDES:
      return getResponseIncludes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case CC:
      return isSetCc();
    case LANG:
      return isSetLang();
    case LL:
      return isSetLl();
    case FULL__DEPRECATED:
      return isSetFull_DEPRECATED();
    case DEBUG:
      return isSetDebug();
    case AUTOCOMPLETE:
      return isSetAutocomplete();
    case WOE_HINT:
      return isSetWoeHint();
    case WOE_RESTRICT:
      return isSetWoeRestrict();
    case BOUNDS:
      return isSetBounds();
    case SLUG:
      return isSetSlug();
    case INCLUDE_POLYGON__DEPRECATED:
      return isSetIncludePolygon_DEPRECATED();
    case RADIUS:
      return isSetRadius();
    case MAX_INTERPRETATIONS:
      return isSetMaxInterpretations();
    case ALLOWED_SOURCES:
      return isSetAllowedSources();
    case RESPONSE_INCLUDES:
      return isSetResponseIncludes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeRequest)
      return this.equals((GeocodeRequest)that);
    return false;
  }

  public boolean equals(GeocodeRequest that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_cc = true && this.isSetCc();
    boolean that_present_cc = true && that.isSetCc();
    if (this_present_cc || that_present_cc) {
      if (!(this_present_cc && that_present_cc))
        return false;
      if (!this.cc.equals(that.cc))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_ll = true && this.isSetLl();
    boolean that_present_ll = true && that.isSetLl();
    if (this_present_ll || that_present_ll) {
      if (!(this_present_ll && that_present_ll))
        return false;
      if (!this.ll.equals(that.ll))
        return false;
    }

    boolean this_present_full_DEPRECATED = true && this.isSetFull_DEPRECATED();
    boolean that_present_full_DEPRECATED = true && that.isSetFull_DEPRECATED();
    if (this_present_full_DEPRECATED || that_present_full_DEPRECATED) {
      if (!(this_present_full_DEPRECATED && that_present_full_DEPRECATED))
        return false;
      if (this.full_DEPRECATED != that.full_DEPRECATED)
        return false;
    }

    boolean this_present_debug = true && this.isSetDebug();
    boolean that_present_debug = true && that.isSetDebug();
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (this.debug != that.debug)
        return false;
    }

    boolean this_present_autocomplete = true && this.isSetAutocomplete();
    boolean that_present_autocomplete = true && that.isSetAutocomplete();
    if (this_present_autocomplete || that_present_autocomplete) {
      if (!(this_present_autocomplete && that_present_autocomplete))
        return false;
      if (this.autocomplete != that.autocomplete)
        return false;
    }

    boolean this_present_woeHint = true && this.isSetWoeHint();
    boolean that_present_woeHint = true && that.isSetWoeHint();
    if (this_present_woeHint || that_present_woeHint) {
      if (!(this_present_woeHint && that_present_woeHint))
        return false;
      if (!this.woeHint.equals(that.woeHint))
        return false;
    }

    boolean this_present_woeRestrict = true && this.isSetWoeRestrict();
    boolean that_present_woeRestrict = true && that.isSetWoeRestrict();
    if (this_present_woeRestrict || that_present_woeRestrict) {
      if (!(this_present_woeRestrict && that_present_woeRestrict))
        return false;
      if (!this.woeRestrict.equals(that.woeRestrict))
        return false;
    }

    boolean this_present_bounds = true && this.isSetBounds();
    boolean that_present_bounds = true && that.isSetBounds();
    if (this_present_bounds || that_present_bounds) {
      if (!(this_present_bounds && that_present_bounds))
        return false;
      if (!this.bounds.equals(that.bounds))
        return false;
    }

    boolean this_present_slug = true && this.isSetSlug();
    boolean that_present_slug = true && that.isSetSlug();
    if (this_present_slug || that_present_slug) {
      if (!(this_present_slug && that_present_slug))
        return false;
      if (!this.slug.equals(that.slug))
        return false;
    }

    boolean this_present_includePolygon_DEPRECATED = true && this.isSetIncludePolygon_DEPRECATED();
    boolean that_present_includePolygon_DEPRECATED = true && that.isSetIncludePolygon_DEPRECATED();
    if (this_present_includePolygon_DEPRECATED || that_present_includePolygon_DEPRECATED) {
      if (!(this_present_includePolygon_DEPRECATED && that_present_includePolygon_DEPRECATED))
        return false;
      if (this.includePolygon_DEPRECATED != that.includePolygon_DEPRECATED)
        return false;
    }

    boolean this_present_radius = true && this.isSetRadius();
    boolean that_present_radius = true && that.isSetRadius();
    if (this_present_radius || that_present_radius) {
      if (!(this_present_radius && that_present_radius))
        return false;
      if (this.radius != that.radius)
        return false;
    }

    boolean this_present_maxInterpretations = true && this.isSetMaxInterpretations();
    boolean that_present_maxInterpretations = true && that.isSetMaxInterpretations();
    if (this_present_maxInterpretations || that_present_maxInterpretations) {
      if (!(this_present_maxInterpretations && that_present_maxInterpretations))
        return false;
      if (this.maxInterpretations != that.maxInterpretations)
        return false;
    }

    boolean this_present_allowedSources = true && this.isSetAllowedSources();
    boolean that_present_allowedSources = true && that.isSetAllowedSources();
    if (this_present_allowedSources || that_present_allowedSources) {
      if (!(this_present_allowedSources && that_present_allowedSources))
        return false;
      if (!this.allowedSources.equals(that.allowedSources))
        return false;
    }

    boolean this_present_responseIncludes = true && this.isSetResponseIncludes();
    boolean that_present_responseIncludes = true && that.isSetResponseIncludes();
    if (this_present_responseIncludes || that_present_responseIncludes) {
      if (!(this_present_responseIncludes && that_present_responseIncludes))
        return false;
      if (!this.responseIncludes.equals(that.responseIncludes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeRequest typedOther = (GeocodeRequest)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCc()).compareTo(typedOther.isSetCc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCc()) {
      lastComparison = TBaseHelper.compareTo(this.cc, typedOther.cc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = TBaseHelper.compareTo(this.lang, typedOther.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLl()).compareTo(typedOther.isSetLl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLl()) {
      lastComparison = TBaseHelper.compareTo(this.ll, typedOther.ll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFull_DEPRECATED()).compareTo(typedOther.isSetFull_DEPRECATED());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFull_DEPRECATED()) {
      lastComparison = TBaseHelper.compareTo(this.full_DEPRECATED, typedOther.full_DEPRECATED);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug()).compareTo(typedOther.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = TBaseHelper.compareTo(this.debug, typedOther.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutocomplete()).compareTo(typedOther.isSetAutocomplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutocomplete()) {
      lastComparison = TBaseHelper.compareTo(this.autocomplete, typedOther.autocomplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWoeHint()).compareTo(typedOther.isSetWoeHint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWoeHint()) {
      lastComparison = TBaseHelper.compareTo(this.woeHint, typedOther.woeHint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWoeRestrict()).compareTo(typedOther.isSetWoeRestrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWoeRestrict()) {
      lastComparison = TBaseHelper.compareTo(this.woeRestrict, typedOther.woeRestrict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBounds()).compareTo(typedOther.isSetBounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBounds()) {
      lastComparison = TBaseHelper.compareTo(this.bounds, typedOther.bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlug()).compareTo(typedOther.isSetSlug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlug()) {
      lastComparison = TBaseHelper.compareTo(this.slug, typedOther.slug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludePolygon_DEPRECATED()).compareTo(typedOther.isSetIncludePolygon_DEPRECATED());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludePolygon_DEPRECATED()) {
      lastComparison = TBaseHelper.compareTo(this.includePolygon_DEPRECATED, typedOther.includePolygon_DEPRECATED);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRadius()).compareTo(typedOther.isSetRadius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRadius()) {
      lastComparison = TBaseHelper.compareTo(this.radius, typedOther.radius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxInterpretations()).compareTo(typedOther.isSetMaxInterpretations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxInterpretations()) {
      lastComparison = TBaseHelper.compareTo(this.maxInterpretations, typedOther.maxInterpretations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedSources()).compareTo(typedOther.isSetAllowedSources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedSources()) {
      lastComparison = TBaseHelper.compareTo(this.allowedSources, typedOther.allowedSources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseIncludes()).compareTo(typedOther.isSetResponseIncludes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseIncludes()) {
      lastComparison = TBaseHelper.compareTo(this.responseIncludes, typedOther.responseIncludes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CC
          if (field.type == TType.STRING) {
            this.cc = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LANG
          if (field.type == TType.STRING) {
            this.lang = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LL
          if (field.type == TType.STRUCT) {
            this.ll = new GeocodePoint();
            this.ll.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FULL__DEPRECATED
          if (field.type == TType.BOOL) {
            this.full_DEPRECATED = iprot.readBool();
            setFull_DEPRECATEDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DEBUG
          if (field.type == TType.I32) {
            this.debug = iprot.readI32();
            setDebugIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // AUTOCOMPLETE
          if (field.type == TType.BOOL) {
            this.autocomplete = iprot.readBool();
            setAutocompleteIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // WOE_HINT
          if (field.type == TType.LIST) {
            {
              TList _list52 = iprot.readListBegin();
              this.woeHint = new ArrayList<YahooWoeType>(_list52.size);
              for (int _i53 = 0; _i53 < _list52.size; ++_i53)
              {
                YahooWoeType _elem54;
                _elem54 = YahooWoeType.findByValue(iprot.readI32());
                this.woeHint.add(_elem54);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // WOE_RESTRICT
          if (field.type == TType.LIST) {
            {
              TList _list55 = iprot.readListBegin();
              this.woeRestrict = new ArrayList<YahooWoeType>(_list55.size);
              for (int _i56 = 0; _i56 < _list55.size; ++_i56)
              {
                YahooWoeType _elem57;
                _elem57 = YahooWoeType.findByValue(iprot.readI32());
                this.woeRestrict.add(_elem57);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // BOUNDS
          if (field.type == TType.STRUCT) {
            this.bounds = new GeocodeBoundingBox();
            this.bounds.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // SLUG
          if (field.type == TType.STRING) {
            this.slug = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // INCLUDE_POLYGON__DEPRECATED
          if (field.type == TType.BOOL) {
            this.includePolygon_DEPRECATED = iprot.readBool();
            setIncludePolygon_DEPRECATEDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // RADIUS
          if (field.type == TType.I32) {
            this.radius = iprot.readI32();
            setRadiusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // MAX_INTERPRETATIONS
          if (field.type == TType.I32) {
            this.maxInterpretations = iprot.readI32();
            setMaxInterpretationsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // ALLOWED_SOURCES
          if (field.type == TType.LIST) {
            {
              TList _list58 = iprot.readListBegin();
              this.allowedSources = new ArrayList<String>(_list58.size);
              for (int _i59 = 0; _i59 < _list58.size; ++_i59)
              {
                String _elem60;
                _elem60 = iprot.readString();
                this.allowedSources.add(_elem60);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // RESPONSE_INCLUDES
          if (field.type == TType.LIST) {
            {
              TList _list61 = iprot.readListBegin();
              this.responseIncludes = new ArrayList<ResponseIncludes>(_list61.size);
              for (int _i62 = 0; _i62 < _list61.size; ++_i62)
              {
                ResponseIncludes _elem63;
                _elem63 = ResponseIncludes.findByValue(iprot.readI32());
                this.responseIncludes.add(_elem63);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.query != null) {
      if (isSetQuery()) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
    }
    if (this.cc != null) {
      if (isSetCc()) {
        oprot.writeFieldBegin(CC_FIELD_DESC);
        oprot.writeString(this.cc);
        oprot.writeFieldEnd();
      }
    }
    if (this.lang != null) {
      if (isSetLang()) {
        oprot.writeFieldBegin(LANG_FIELD_DESC);
        oprot.writeString(this.lang);
        oprot.writeFieldEnd();
      }
    }
    if (this.ll != null) {
      if (isSetLl()) {
        oprot.writeFieldBegin(LL_FIELD_DESC);
        this.ll.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetFull_DEPRECATED()) {
      oprot.writeFieldBegin(FULL__DEPRECATED_FIELD_DESC);
      oprot.writeBool(this.full_DEPRECATED);
      oprot.writeFieldEnd();
    }
    if (isSetDebug()) {
      oprot.writeFieldBegin(DEBUG_FIELD_DESC);
      oprot.writeI32(this.debug);
      oprot.writeFieldEnd();
    }
    if (isSetAutocomplete()) {
      oprot.writeFieldBegin(AUTOCOMPLETE_FIELD_DESC);
      oprot.writeBool(this.autocomplete);
      oprot.writeFieldEnd();
    }
    if (this.woeHint != null) {
      if (isSetWoeHint()) {
        oprot.writeFieldBegin(WOE_HINT_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.woeHint.size()));
          for (YahooWoeType _iter64 : this.woeHint)
          {
            oprot.writeI32(_iter64.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.woeRestrict != null) {
      if (isSetWoeRestrict()) {
        oprot.writeFieldBegin(WOE_RESTRICT_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.woeRestrict.size()));
          for (YahooWoeType _iter65 : this.woeRestrict)
          {
            oprot.writeI32(_iter65.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.bounds != null) {
      if (isSetBounds()) {
        oprot.writeFieldBegin(BOUNDS_FIELD_DESC);
        this.bounds.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.slug != null) {
      if (isSetSlug()) {
        oprot.writeFieldBegin(SLUG_FIELD_DESC);
        oprot.writeString(this.slug);
        oprot.writeFieldEnd();
      }
    }
    if (isSetIncludePolygon_DEPRECATED()) {
      oprot.writeFieldBegin(INCLUDE_POLYGON__DEPRECATED_FIELD_DESC);
      oprot.writeBool(this.includePolygon_DEPRECATED);
      oprot.writeFieldEnd();
    }
    if (isSetRadius()) {
      oprot.writeFieldBegin(RADIUS_FIELD_DESC);
      oprot.writeI32(this.radius);
      oprot.writeFieldEnd();
    }
    if (isSetMaxInterpretations()) {
      oprot.writeFieldBegin(MAX_INTERPRETATIONS_FIELD_DESC);
      oprot.writeI32(this.maxInterpretations);
      oprot.writeFieldEnd();
    }
    if (this.allowedSources != null) {
      if (isSetAllowedSources()) {
        oprot.writeFieldBegin(ALLOWED_SOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.allowedSources.size()));
          for (String _iter66 : this.allowedSources)
          {
            oprot.writeString(_iter66);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.responseIncludes != null) {
      if (isSetResponseIncludes()) {
        oprot.writeFieldBegin(RESPONSE_INCLUDES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.responseIncludes.size()));
          for (ResponseIncludes _iter67 : this.responseIncludes)
          {
            oprot.writeI32(_iter67.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeRequest(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetCc()) {
      if (!first) sb.append(", ");
      sb.append("cc:");
      if (this.cc == null) {
        sb.append("null");
      } else {
        sb.append(this.cc);
      }
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    if (isSetLl()) {
      if (!first) sb.append(", ");
      sb.append("ll:");
      if (this.ll == null) {
        sb.append("null");
      } else {
        sb.append(this.ll);
      }
      first = false;
    }
    if (isSetFull_DEPRECATED()) {
      if (!first) sb.append(", ");
      sb.append("full_DEPRECATED:");
      sb.append(this.full_DEPRECATED);
      first = false;
    }
    if (isSetDebug()) {
      if (!first) sb.append(", ");
      sb.append("debug:");
      sb.append(this.debug);
      first = false;
    }
    if (isSetAutocomplete()) {
      if (!first) sb.append(", ");
      sb.append("autocomplete:");
      sb.append(this.autocomplete);
      first = false;
    }
    if (isSetWoeHint()) {
      if (!first) sb.append(", ");
      sb.append("woeHint:");
      if (this.woeHint == null) {
        sb.append("null");
      } else {
        sb.append(this.woeHint);
      }
      first = false;
    }
    if (isSetWoeRestrict()) {
      if (!first) sb.append(", ");
      sb.append("woeRestrict:");
      if (this.woeRestrict == null) {
        sb.append("null");
      } else {
        sb.append(this.woeRestrict);
      }
      first = false;
    }
    if (isSetBounds()) {
      if (!first) sb.append(", ");
      sb.append("bounds:");
      if (this.bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.bounds);
      }
      first = false;
    }
    if (isSetSlug()) {
      if (!first) sb.append(", ");
      sb.append("slug:");
      if (this.slug == null) {
        sb.append("null");
      } else {
        sb.append(this.slug);
      }
      first = false;
    }
    if (isSetIncludePolygon_DEPRECATED()) {
      if (!first) sb.append(", ");
      sb.append("includePolygon_DEPRECATED:");
      sb.append(this.includePolygon_DEPRECATED);
      first = false;
    }
    if (isSetRadius()) {
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
    }
    if (isSetMaxInterpretations()) {
      if (!first) sb.append(", ");
      sb.append("maxInterpretations:");
      sb.append(this.maxInterpretations);
      first = false;
    }
    if (isSetAllowedSources()) {
      if (!first) sb.append(", ");
      sb.append("allowedSources:");
      if (this.allowedSources == null) {
        sb.append("null");
      } else {
        sb.append(this.allowedSources);
      }
      first = false;
    }
    if (isSetResponseIncludes()) {
      if (!first) sb.append(", ");
      sb.append("responseIncludes:");
      if (this.responseIncludes == null) {
        sb.append("null");
      } else {
        sb.append(this.responseIncludes);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

