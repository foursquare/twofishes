/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class GeocodeInterpretation implements TBase<GeocodeInterpretation, GeocodeInterpretation._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GeocodeInterpretation");

  private static final TField WHAT_FIELD_DESC = new TField("what", TType.STRING, (short)1);
  private static final TField WHERE_FIELD_DESC = new TField("where", TType.STRING, (short)2);
  private static final TField FEATURE_FIELD_DESC = new TField("feature", TType.STRUCT, (short)3);
  private static final TField PARENTS_FIELD_DESC = new TField("parents", TType.LIST, (short)4);
  private static final TField SCORING_FEATURES__DEPRECATED_FIELD_DESC = new TField("scoringFeatures_DEPRECATED", TType.STRUCT, (short)5);
  private static final TField SCORES_FIELD_DESC = new TField("scores", TType.STRUCT, (short)6);
  private static final TField DEBUG_INFO_FIELD_DESC = new TField("debugInfo", TType.STRUCT, (short)7);
  private static final TField PARENT_LONG_IDS_FIELD_DESC = new TField("parentLongIds", TType.LIST, (short)8);

  public String what;
  public String where;
  public GeocodeFeature feature;
  public List<GeocodeFeature> parents;
  public ScoringFeatures scoringFeatures_DEPRECATED;
  public InterpretationScoringFeatures scores;
  public InterpretationDebugInfo debugInfo;
  public List<Long> parentLongIds;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    WHAT((short)1, "what"),
    WHERE((short)2, "where"),
    FEATURE((short)3, "feature"),
    PARENTS((short)4, "parents"),
    SCORING_FEATURES__DEPRECATED((short)5, "scoringFeatures_DEPRECATED"),
    SCORES((short)6, "scores"),
    DEBUG_INFO((short)7, "debugInfo"),
    PARENT_LONG_IDS((short)8, "parentLongIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WHAT
          return WHAT;
        case 2: // WHERE
          return WHERE;
        case 3: // FEATURE
          return FEATURE;
        case 4: // PARENTS
          return PARENTS;
        case 5: // SCORING_FEATURES__DEPRECATED
          return SCORING_FEATURES__DEPRECATED;
        case 6: // SCORES
          return SCORES;
        case 7: // DEBUG_INFO
          return DEBUG_INFO;
        case 8: // PARENT_LONG_IDS
          return PARENT_LONG_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WHAT, new FieldMetaData("what", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WHERE, new FieldMetaData("where", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FEATURE, new FieldMetaData("feature", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, GeocodeFeature.class)));
    tmpMap.put(_Fields.PARENTS, new FieldMetaData("parents", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, GeocodeFeature.class))));
    tmpMap.put(_Fields.SCORING_FEATURES__DEPRECATED, new FieldMetaData("scoringFeatures_DEPRECATED", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ScoringFeatures.class)));
    tmpMap.put(_Fields.SCORES, new FieldMetaData("scores", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, InterpretationScoringFeatures.class)));
    tmpMap.put(_Fields.DEBUG_INFO, new FieldMetaData("debugInfo", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, InterpretationDebugInfo.class)));
    tmpMap.put(_Fields.PARENT_LONG_IDS, new FieldMetaData("parentLongIds", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(GeocodeInterpretation.class, metaDataMap);
  }

  public GeocodeInterpretation() {
  }

  public GeocodeInterpretation(
    String what,
    String where,
    GeocodeFeature feature)
  {
    this();
    this.what = what;
    this.where = where;
    this.feature = feature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeInterpretation(GeocodeInterpretation other) {
    if (other.isSetWhat()) {
      this.what = other.what;
    }
    if (other.isSetWhere()) {
      this.where = other.where;
    }
    if (other.isSetFeature()) {
      this.feature = new GeocodeFeature(other.feature);
    }
    if (other.isSetParents()) {
      List<GeocodeFeature> __this__parents = new ArrayList<GeocodeFeature>();
      for (GeocodeFeature other_element : other.parents) {
        __this__parents.add(new GeocodeFeature(other_element));
      }
      this.parents = __this__parents;
    }
    if (other.isSetScoringFeatures_DEPRECATED()) {
      this.scoringFeatures_DEPRECATED = new ScoringFeatures(other.scoringFeatures_DEPRECATED);
    }
    if (other.isSetScores()) {
      this.scores = new InterpretationScoringFeatures(other.scores);
    }
    if (other.isSetDebugInfo()) {
      this.debugInfo = new InterpretationDebugInfo(other.debugInfo);
    }
    if (other.isSetParentLongIds()) {
      List<Long> __this__parentLongIds = new ArrayList<Long>();
      for (Long other_element : other.parentLongIds) {
        __this__parentLongIds.add(other_element);
      }
      this.parentLongIds = __this__parentLongIds;
    }
  }

  public GeocodeInterpretation deepCopy() {
    return new GeocodeInterpretation(this);
  }

  @Override
  public void clear() {
    this.what = null;
    this.where = null;
    this.feature = null;
    this.parents = null;
    this.scoringFeatures_DEPRECATED = null;
    this.scores = null;
    this.debugInfo = null;
    this.parentLongIds = null;
  }

  public String getWhat() {
    return this.what;
  }

  public GeocodeInterpretation setWhat(String what) {
    this.what = what;
    return this;
  }

  public void unsetWhat() {
    this.what = null;
  }

  /** Returns true if field what is set (has been asigned a value) and false otherwise */
  public boolean isSetWhat() {
    return this.what != null;
  }

  public void setWhatIsSet(boolean value) {
    if (!value) {
      this.what = null;
    }
  }

  public String getWhere() {
    return this.where;
  }

  public GeocodeInterpretation setWhere(String where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been asigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  public GeocodeFeature getFeature() {
    return this.feature;
  }

  public GeocodeInterpretation setFeature(GeocodeFeature feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been asigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public int getParentsSize() {
    return (this.parents == null) ? 0 : this.parents.size();
  }

  public java.util.Iterator<GeocodeFeature> getParentsIterator() {
    return (this.parents == null) ? null : this.parents.iterator();
  }

  public void addToParents(GeocodeFeature elem) {
    if (this.parents == null) {
      this.parents = new ArrayList<GeocodeFeature>();
    }
    this.parents.add(elem);
  }

  public List<GeocodeFeature> getParents() {
    return this.parents;
  }

  public GeocodeInterpretation setParents(List<GeocodeFeature> parents) {
    this.parents = parents;
    return this;
  }

  public void unsetParents() {
    this.parents = null;
  }

  /** Returns true if field parents is set (has been asigned a value) and false otherwise */
  public boolean isSetParents() {
    return this.parents != null;
  }

  public void setParentsIsSet(boolean value) {
    if (!value) {
      this.parents = null;
    }
  }

  public ScoringFeatures getScoringFeatures_DEPRECATED() {
    return this.scoringFeatures_DEPRECATED;
  }

  public GeocodeInterpretation setScoringFeatures_DEPRECATED(ScoringFeatures scoringFeatures_DEPRECATED) {
    this.scoringFeatures_DEPRECATED = scoringFeatures_DEPRECATED;
    return this;
  }

  public void unsetScoringFeatures_DEPRECATED() {
    this.scoringFeatures_DEPRECATED = null;
  }

  /** Returns true if field scoringFeatures_DEPRECATED is set (has been asigned a value) and false otherwise */
  public boolean isSetScoringFeatures_DEPRECATED() {
    return this.scoringFeatures_DEPRECATED != null;
  }

  public void setScoringFeatures_DEPRECATEDIsSet(boolean value) {
    if (!value) {
      this.scoringFeatures_DEPRECATED = null;
    }
  }

  public InterpretationScoringFeatures getScores() {
    return this.scores;
  }

  public GeocodeInterpretation setScores(InterpretationScoringFeatures scores) {
    this.scores = scores;
    return this;
  }

  public void unsetScores() {
    this.scores = null;
  }

  /** Returns true if field scores is set (has been asigned a value) and false otherwise */
  public boolean isSetScores() {
    return this.scores != null;
  }

  public void setScoresIsSet(boolean value) {
    if (!value) {
      this.scores = null;
    }
  }

  public InterpretationDebugInfo getDebugInfo() {
    return this.debugInfo;
  }

  public GeocodeInterpretation setDebugInfo(InterpretationDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  public void unsetDebugInfo() {
    this.debugInfo = null;
  }

  /** Returns true if field debugInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetDebugInfo() {
    return this.debugInfo != null;
  }

  public void setDebugInfoIsSet(boolean value) {
    if (!value) {
      this.debugInfo = null;
    }
  }

  public int getParentLongIdsSize() {
    return (this.parentLongIds == null) ? 0 : this.parentLongIds.size();
  }

  public java.util.Iterator<Long> getParentLongIdsIterator() {
    return (this.parentLongIds == null) ? null : this.parentLongIds.iterator();
  }

  public void addToParentLongIds(long elem) {
    if (this.parentLongIds == null) {
      this.parentLongIds = new ArrayList<Long>();
    }
    this.parentLongIds.add(elem);
  }

  public List<Long> getParentLongIds() {
    return this.parentLongIds;
  }

  public GeocodeInterpretation setParentLongIds(List<Long> parentLongIds) {
    this.parentLongIds = parentLongIds;
    return this;
  }

  public void unsetParentLongIds() {
    this.parentLongIds = null;
  }

  /** Returns true if field parentLongIds is set (has been asigned a value) and false otherwise */
  public boolean isSetParentLongIds() {
    return this.parentLongIds != null;
  }

  public void setParentLongIdsIsSet(boolean value) {
    if (!value) {
      this.parentLongIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WHAT:
      if (value == null) {
        unsetWhat();
      } else {
        setWhat((String)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((String)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((GeocodeFeature)value);
      }
      break;

    case PARENTS:
      if (value == null) {
        unsetParents();
      } else {
        setParents((List<GeocodeFeature>)value);
      }
      break;

    case SCORING_FEATURES__DEPRECATED:
      if (value == null) {
        unsetScoringFeatures_DEPRECATED();
      } else {
        setScoringFeatures_DEPRECATED((ScoringFeatures)value);
      }
      break;

    case SCORES:
      if (value == null) {
        unsetScores();
      } else {
        setScores((InterpretationScoringFeatures)value);
      }
      break;

    case DEBUG_INFO:
      if (value == null) {
        unsetDebugInfo();
      } else {
        setDebugInfo((InterpretationDebugInfo)value);
      }
      break;

    case PARENT_LONG_IDS:
      if (value == null) {
        unsetParentLongIds();
      } else {
        setParentLongIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WHAT:
      return getWhat();

    case WHERE:
      return getWhere();

    case FEATURE:
      return getFeature();

    case PARENTS:
      return getParents();

    case SCORING_FEATURES__DEPRECATED:
      return getScoringFeatures_DEPRECATED();

    case SCORES:
      return getScores();

    case DEBUG_INFO:
      return getDebugInfo();

    case PARENT_LONG_IDS:
      return getParentLongIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WHAT:
      return isSetWhat();
    case WHERE:
      return isSetWhere();
    case FEATURE:
      return isSetFeature();
    case PARENTS:
      return isSetParents();
    case SCORING_FEATURES__DEPRECATED:
      return isSetScoringFeatures_DEPRECATED();
    case SCORES:
      return isSetScores();
    case DEBUG_INFO:
      return isSetDebugInfo();
    case PARENT_LONG_IDS:
      return isSetParentLongIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeInterpretation)
      return this.equals((GeocodeInterpretation)that);
    return false;
  }

  public boolean equals(GeocodeInterpretation that) {
    if (that == null)
      return false;

    boolean this_present_what = true && this.isSetWhat();
    boolean that_present_what = true && that.isSetWhat();
    if (this_present_what || that_present_what) {
      if (!(this_present_what && that_present_what))
        return false;
      if (!this.what.equals(that.what))
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_parents = true && this.isSetParents();
    boolean that_present_parents = true && that.isSetParents();
    if (this_present_parents || that_present_parents) {
      if (!(this_present_parents && that_present_parents))
        return false;
      if (!this.parents.equals(that.parents))
        return false;
    }

    boolean this_present_scoringFeatures_DEPRECATED = true && this.isSetScoringFeatures_DEPRECATED();
    boolean that_present_scoringFeatures_DEPRECATED = true && that.isSetScoringFeatures_DEPRECATED();
    if (this_present_scoringFeatures_DEPRECATED || that_present_scoringFeatures_DEPRECATED) {
      if (!(this_present_scoringFeatures_DEPRECATED && that_present_scoringFeatures_DEPRECATED))
        return false;
      if (!this.scoringFeatures_DEPRECATED.equals(that.scoringFeatures_DEPRECATED))
        return false;
    }

    boolean this_present_scores = true && this.isSetScores();
    boolean that_present_scores = true && that.isSetScores();
    if (this_present_scores || that_present_scores) {
      if (!(this_present_scores && that_present_scores))
        return false;
      if (!this.scores.equals(that.scores))
        return false;
    }

    boolean this_present_debugInfo = true && this.isSetDebugInfo();
    boolean that_present_debugInfo = true && that.isSetDebugInfo();
    if (this_present_debugInfo || that_present_debugInfo) {
      if (!(this_present_debugInfo && that_present_debugInfo))
        return false;
      if (!this.debugInfo.equals(that.debugInfo))
        return false;
    }

    boolean this_present_parentLongIds = true && this.isSetParentLongIds();
    boolean that_present_parentLongIds = true && that.isSetParentLongIds();
    if (this_present_parentLongIds || that_present_parentLongIds) {
      if (!(this_present_parentLongIds && that_present_parentLongIds))
        return false;
      if (!this.parentLongIds.equals(that.parentLongIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeInterpretation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeInterpretation typedOther = (GeocodeInterpretation)other;

    lastComparison = Boolean.valueOf(isSetWhat()).compareTo(typedOther.isSetWhat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhat()) {
      lastComparison = TBaseHelper.compareTo(this.what, typedOther.what);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhere()).compareTo(typedOther.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = TBaseHelper.compareTo(this.where, typedOther.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(typedOther.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = TBaseHelper.compareTo(this.feature, typedOther.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParents()).compareTo(typedOther.isSetParents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParents()) {
      lastComparison = TBaseHelper.compareTo(this.parents, typedOther.parents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScoringFeatures_DEPRECATED()).compareTo(typedOther.isSetScoringFeatures_DEPRECATED());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoringFeatures_DEPRECATED()) {
      lastComparison = TBaseHelper.compareTo(this.scoringFeatures_DEPRECATED, typedOther.scoringFeatures_DEPRECATED);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScores()).compareTo(typedOther.isSetScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScores()) {
      lastComparison = TBaseHelper.compareTo(this.scores, typedOther.scores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebugInfo()).compareTo(typedOther.isSetDebugInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugInfo()) {
      lastComparison = TBaseHelper.compareTo(this.debugInfo, typedOther.debugInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentLongIds()).compareTo(typedOther.isSetParentLongIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentLongIds()) {
      lastComparison = TBaseHelper.compareTo(this.parentLongIds, typedOther.parentLongIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WHAT
          if (field.type == TType.STRING) {
            this.what = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // WHERE
          if (field.type == TType.STRING) {
            this.where = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FEATURE
          if (field.type == TType.STRUCT) {
            this.feature = new GeocodeFeature();
            this.feature.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PARENTS
          if (field.type == TType.LIST) {
            {
              TList _list36 = iprot.readListBegin();
              this.parents = new ArrayList<GeocodeFeature>(_list36.size);
              for (int _i37 = 0; _i37 < _list36.size; ++_i37)
              {
                GeocodeFeature _elem38;
                _elem38 = new GeocodeFeature();
                _elem38.read(iprot);
                this.parents.add(_elem38);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SCORING_FEATURES__DEPRECATED
          if (field.type == TType.STRUCT) {
            this.scoringFeatures_DEPRECATED = new ScoringFeatures();
            this.scoringFeatures_DEPRECATED.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SCORES
          if (field.type == TType.STRUCT) {
            this.scores = new InterpretationScoringFeatures();
            this.scores.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DEBUG_INFO
          if (field.type == TType.STRUCT) {
            this.debugInfo = new InterpretationDebugInfo();
            this.debugInfo.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // PARENT_LONG_IDS
          if (field.type == TType.LIST) {
            {
              TList _list39 = iprot.readListBegin();
              this.parentLongIds = new ArrayList<Long>(_list39.size);
              for (int _i40 = 0; _i40 < _list39.size; ++_i40)
              {
                long _elem41;
                _elem41 = iprot.readI64();
                this.parentLongIds.add(_elem41);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.what != null) {
      oprot.writeFieldBegin(WHAT_FIELD_DESC);
      oprot.writeString(this.what);
      oprot.writeFieldEnd();
    }
    if (this.where != null) {
      oprot.writeFieldBegin(WHERE_FIELD_DESC);
      oprot.writeString(this.where);
      oprot.writeFieldEnd();
    }
    if (this.feature != null) {
      oprot.writeFieldBegin(FEATURE_FIELD_DESC);
      this.feature.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.parents != null) {
      if (isSetParents()) {
        oprot.writeFieldBegin(PARENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.parents.size()));
          for (GeocodeFeature _iter42 : this.parents)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.scoringFeatures_DEPRECATED != null) {
      if (isSetScoringFeatures_DEPRECATED()) {
        oprot.writeFieldBegin(SCORING_FEATURES__DEPRECATED_FIELD_DESC);
        this.scoringFeatures_DEPRECATED.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.scores != null) {
      if (isSetScores()) {
        oprot.writeFieldBegin(SCORES_FIELD_DESC);
        this.scores.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.debugInfo != null) {
      if (isSetDebugInfo()) {
        oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
        this.debugInfo.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.parentLongIds != null) {
      if (isSetParentLongIds()) {
        oprot.writeFieldBegin(PARENT_LONG_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.parentLongIds.size()));
          for (long _iter43 : this.parentLongIds)
          {
            oprot.writeI64(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeInterpretation(");
    boolean first = true;

    sb.append("what:");
    if (this.what == null) {
      sb.append("null");
    } else {
      sb.append(this.what);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("where:");
    if (this.where == null) {
      sb.append("null");
    } else {
      sb.append(this.where);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature:");
    if (this.feature == null) {
      sb.append("null");
    } else {
      sb.append(this.feature);
    }
    first = false;
    if (isSetParents()) {
      if (!first) sb.append(", ");
      sb.append("parents:");
      if (this.parents == null) {
        sb.append("null");
      } else {
        sb.append(this.parents);
      }
      first = false;
    }
    if (isSetScoringFeatures_DEPRECATED()) {
      if (!first) sb.append(", ");
      sb.append("scoringFeatures_DEPRECATED:");
      if (this.scoringFeatures_DEPRECATED == null) {
        sb.append("null");
      } else {
        sb.append(this.scoringFeatures_DEPRECATED);
      }
      first = false;
    }
    if (isSetScores()) {
      if (!first) sb.append(", ");
      sb.append("scores:");
      if (this.scores == null) {
        sb.append("null");
      } else {
        sb.append(this.scores);
      }
      first = false;
    }
    if (isSetDebugInfo()) {
      if (!first) sb.append(", ");
      sb.append("debugInfo:");
      if (this.debugInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.debugInfo);
      }
      first = false;
    }
    if (isSetParentLongIds()) {
      if (!first) sb.append(", ");
      sb.append("parentLongIds:");
      if (this.parentLongIds == null) {
        sb.append("null");
      } else {
        sb.append(this.parentLongIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

